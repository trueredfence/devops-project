# /root/gateway/config.sh

# Tunnel Details
declare -a lantun=("lan-t1" "lan-t2")
declare -a wantun=("wan-t1" "wan-t2")

# Physical Interface
declare -a lan_interface=("eno1")
declare -a wan_interface=("eno2" "ens2f0np0")

# Zones Details
declare -A zones=(
    ["lantz"]="lan-t1 lan-t2"
    ["wantz"]="wan-t1 wan-t2" 
    ["external"]="ens2f0np0 eno2"    
    ["public"]="eno1"
)

# Policy
declare -a rules=(
    "lantz wantz accept"
)

# Firewall Rules
declare -A firewall_rules=(
    ["lan-t1"]="443/tcp 80/tcp 7119/tcp 1179/tcp"
    ["lan-t2"]="443/tcp 80/tcp 7119/tcp 1179/tcp"
)

# For active internet connections
declare -a active_interfaces=()

# Declare array for valid ports
declare -a validPort=("tcp" "udp" "icmp")
declare -a wg_ports=("51830" "51831" "51832" "51833")



  # Path to the external variables file
variables_file="/etc/myscript/variables.sh"

# Check if the file exists and source it
if [[ -f "$variables_file" ]]; then
    source "$variables_file"
else
    echo "Variables file not found at $variables_file. Exiting..."
    exit 1
fi



required_gateway_pacakges=("curl wget git vim firewalld cockpit net-tools traceroute wireguard-tools zsh uzip")

install_gw(){
	# Check internet
	sudo dnf update -y
	sudo dnf install -y "$required_gateway_pacakges"  
  # Create sample wg file in wireguard location
  # create directory in /root/gateway/
  # Create config file for gateway config.sh
  # Create gateway service in service
  # Copy self into /usr/share/bin as gateway
  # Change mode to +x 
  # Download and install wireguard dashboard
  # Change wireguard.ini file ip address
  # Create wgdashboard service
  # Enable both the service and reload services
  # install kali shell 
  # Create normal user apple with password apple
  # Disable root ssh  
  # Reboot system ask for reboot
  # Show Message config file location etc
  # Delete self from the system.
}

#!/bin/bash

# Function to parse the Zones section from a config file
parse_zones_from_file() {
    local file="$1"
    
    echo "[Zones]"
    awk '
    /^\[Zones\]/ {found=1; next}     # Start processing after the [Zones] header
    /^\[/ {found=0}                  # Stop processing when a new section starts
    found && /=/ {                   # Only process lines with a zone definition
        zone_name=$1                 # Zone name is the first field
        interfaces=$2
        print "Zone: " zone_name
        for (i=2; i<=NF; i++) {     # Loop through the interfaces
            print "  Interface: " $i
        }
    }' "$file"
}

# Function to parse the Policy section
parse_policy_from_file() {
    local file="$1"

    echo "[Policy]"
    awk '
    /^\[Policy\]/ {found=1; next}    # Start processing after the [Policy] header
    /^\[/ {found=0}                  # Stop processing when a new section starts
    found && /->/ {                  # Only process lines with "->"
        zone1=$1
        zone2=$3
        print "  Policy: " zone1 " -> " zone2
    }' "$file"
}

# Function to parse the ZoneRules section
parse_zonerules_from_file() {
    local file="$1"

    echo "[ZoneRules]"
    awk '
    /^\[ZoneRules\]/ {found=1; next}  # Start processing after the [ZoneRules] header
    /^\[/ {found=0}                   # Stop processing when a new section starts
    found && /=/ {                    # Only process lines with zone rules
        zone=$1
        rule_type=$2
        rule_value=$3
        print "  Zone: " zone " Rule: " rule_type " " rule_value
    }' "$file"
}

# Function to parse the DirectRules section
parse_directrules_from_file() {
    local file="$1"

    echo "[DirectRules]"
    awk '
    /^\[DirectRules\]/ {found=1; next}  # Start processing after the [DirectRules] header
    /^\[/ {found=0}                     # Stop processing when a new section starts
    found && /->/ {                     # Only process lines with "->"
        interface1=$1
        interface2=$3
        action=$5
        ports=$6
        print "  Direct Rule: " interface1 " -> " interface2 " " action ": " ports
    }' "$file"
}

# Main function to call all parsing functions
parse_config() {
    local file="$1"

    # Call the parsing functions for each section
    parse_zones_from_file "$file"
    parse_policy_from_file "$file"
    parse_zonerules_from_file "$file"
    parse_directrules_from_file "$file"
}

# Call the main function with the config.ini file path
parse_config "config.ini"
