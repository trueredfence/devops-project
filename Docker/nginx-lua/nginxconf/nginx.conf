worker_processes auto;
events {
    worker_connections 1024;
}
http {
    # resolver 127.0.0.11 valid=10s;  # Docker's internal DNS resolver
    lua_package_path "/usr/local/openresty/lua-scripts/?.lua;;";

    server {
        listen 80;
        server_name ~^(?<subdomain>.+)\.redfence\.internal$;

        set $proxy_target "";  # Define the variable before using it

        location / {
            access_by_lua_block {
                local dynamic_proxy = require "dynamic_proxy"
                local target = dynamic_proxy.get_target(ngx.var.subdomain)

                if not target then
                    ngx.log(ngx.ERR, "No target found for subdomain: ", ngx.var.subdomain)
                    ngx.exit(404)
                else
                    ngx.log(ngx.ERR, "Proxying request to: ", target)
                    ngx.var.proxy_target = target  -- Set dynamic proxy target
                end
            }

            proxy_pass $proxy_target;  # Reverse proxy to the target URL
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
# http {   
#     lua_package_path "/usr/local/openresty/lua-scripts/?.lua;;";

#     server {
#         listen 80;
#         server_name ~^(?<subdomain>.+)\.redfence\.internal$;

#         set $proxy_target "";  # <--- Declare the variable

#         location / {
#             content_by_lua_block {
#                 local dynamic_proxy = require "dynamic_proxy"
#                 local target = dynamic_proxy.get_target(ngx.var.subdomain)

#                 if not target then
#                     ngx.log(ngx.ERR, "No target found for subdomain: ", ngx.var.subdomain)
#                     ngx.exit(404)
#                 else
#                     ngx.log(ngx.ERR, "Proxy target set to: ", target)
#                     ngx.var.proxy_target = target
#                     ngx.redirect(target)
#                 end
#             }
#         }
#     }
# }
